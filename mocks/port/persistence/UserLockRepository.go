// Code generated by mockery. DO NOT EDIT.

package persistence

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockUserLockRepository is an autogenerated mock type for the UserLockRepository type
type MockUserLockRepository struct {
	mock.Mock
}

type MockUserLockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserLockRepository) EXPECT() *MockUserLockRepository_Expecter {
	return &MockUserLockRepository_Expecter{mock: &_m.Mock}
}

// AcquireLock provides a mock function with given fields: ctx, userID, duration
func (_m *MockUserLockRepository) AcquireLock(ctx context.Context, userID uint64, duration time.Duration) error {
	ret := _m.Called(ctx, userID, duration)

	if len(ret) == 0 {
		panic("no return value specified for AcquireLock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, time.Duration) error); ok {
		r0 = rf(ctx, userID, duration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserLockRepository_AcquireLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcquireLock'
type MockUserLockRepository_AcquireLock_Call struct {
	*mock.Call
}

// AcquireLock is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
//   - duration time.Duration
func (_e *MockUserLockRepository_Expecter) AcquireLock(ctx interface{}, userID interface{}, duration interface{}) *MockUserLockRepository_AcquireLock_Call {
	return &MockUserLockRepository_AcquireLock_Call{Call: _e.mock.On("AcquireLock", ctx, userID, duration)}
}

func (_c *MockUserLockRepository_AcquireLock_Call) Run(run func(ctx context.Context, userID uint64, duration time.Duration)) *MockUserLockRepository_AcquireLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockUserLockRepository_AcquireLock_Call) Return(_a0 error) *MockUserLockRepository_AcquireLock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserLockRepository_AcquireLock_Call) RunAndReturn(run func(context.Context, uint64, time.Duration) error) *MockUserLockRepository_AcquireLock_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseLock provides a mock function with given fields: ctx, userID
func (_m *MockUserLockRepository) ReleaseLock(ctx context.Context, userID uint64) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseLock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserLockRepository_ReleaseLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseLock'
type MockUserLockRepository_ReleaseLock_Call struct {
	*mock.Call
}

// ReleaseLock is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
func (_e *MockUserLockRepository_Expecter) ReleaseLock(ctx interface{}, userID interface{}) *MockUserLockRepository_ReleaseLock_Call {
	return &MockUserLockRepository_ReleaseLock_Call{Call: _e.mock.On("ReleaseLock", ctx, userID)}
}

func (_c *MockUserLockRepository_ReleaseLock_Call) Run(run func(ctx context.Context, userID uint64)) *MockUserLockRepository_ReleaseLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockUserLockRepository_ReleaseLock_Call) Return(_a0 error) *MockUserLockRepository_ReleaseLock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserLockRepository_ReleaseLock_Call) RunAndReturn(run func(context.Context, uint64) error) *MockUserLockRepository_ReleaseLock_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserLockRepository creates a new instance of MockUserLockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserLockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserLockRepository {
	mock := &MockUserLockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
