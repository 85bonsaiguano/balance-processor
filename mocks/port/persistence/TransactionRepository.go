// Code generated by mockery. DO NOT EDIT.

package persistence

import (
	context "context"

	entity "github.com/amirhossein-jamali/balance-processor/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockTransactionRepository is an autogenerated mock type for the TransactionRepository type
type MockTransactionRepository struct {
	mock.Mock
}

type MockTransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionRepository) EXPECT() *MockTransactionRepository_Expecter {
	return &MockTransactionRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, transaction
func (_m *MockTransactionRepository) Create(ctx context.Context, transaction *entity.Transaction) error {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTransactionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *entity.Transaction
func (_e *MockTransactionRepository_Expecter) Create(ctx interface{}, transaction interface{}) *MockTransactionRepository_Create_Call {
	return &MockTransactionRepository_Create_Call{Call: _e.mock.On("Create", ctx, transaction)}
}

func (_c *MockTransactionRepository_Create_Call) Run(run func(ctx context.Context, transaction *entity.Transaction)) *MockTransactionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Transaction))
	})
	return _c
}

func (_c *MockTransactionRepository_Create_Call) Return(_a0 error) *MockTransactionRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionRepository_Create_Call) RunAndReturn(run func(context.Context, *entity.Transaction) error) *MockTransactionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTransactionID provides a mock function with given fields: ctx, transactionID
func (_m *MockTransactionRepository) GetByTransactionID(ctx context.Context, transactionID string) (*entity.Transaction, error) {
	ret := _m.Called(ctx, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for GetByTransactionID")
	}

	var r0 *entity.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Transaction, error)); ok {
		return rf(ctx, transactionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Transaction); ok {
		r0 = rf(ctx, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_GetByTransactionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTransactionID'
type MockTransactionRepository_GetByTransactionID_Call struct {
	*mock.Call
}

// GetByTransactionID is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionID string
func (_e *MockTransactionRepository_Expecter) GetByTransactionID(ctx interface{}, transactionID interface{}) *MockTransactionRepository_GetByTransactionID_Call {
	return &MockTransactionRepository_GetByTransactionID_Call{Call: _e.mock.On("GetByTransactionID", ctx, transactionID)}
}

func (_c *MockTransactionRepository_GetByTransactionID_Call) Run(run func(ctx context.Context, transactionID string)) *MockTransactionRepository_GetByTransactionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTransactionRepository_GetByTransactionID_Call) Return(_a0 *entity.Transaction, _a1 error) *MockTransactionRepository_GetByTransactionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepository_GetByTransactionID_Call) RunAndReturn(run func(context.Context, string) (*entity.Transaction, error)) *MockTransactionRepository_GetByTransactionID_Call {
	_c.Call.Return(run)
	return _c
}

// TransactionExists provides a mock function with given fields: ctx, transactionID
func (_m *MockTransactionRepository) TransactionExists(ctx context.Context, transactionID string) (bool, error) {
	ret := _m.Called(ctx, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for TransactionExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, transactionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, transactionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_TransactionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionExists'
type MockTransactionRepository_TransactionExists_Call struct {
	*mock.Call
}

// TransactionExists is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionID string
func (_e *MockTransactionRepository_Expecter) TransactionExists(ctx interface{}, transactionID interface{}) *MockTransactionRepository_TransactionExists_Call {
	return &MockTransactionRepository_TransactionExists_Call{Call: _e.mock.On("TransactionExists", ctx, transactionID)}
}

func (_c *MockTransactionRepository_TransactionExists_Call) Run(run func(ctx context.Context, transactionID string)) *MockTransactionRepository_TransactionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTransactionRepository_TransactionExists_Call) Return(_a0 bool, _a1 error) *MockTransactionRepository_TransactionExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepository_TransactionExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockTransactionRepository_TransactionExists_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, transaction
func (_m *MockTransactionRepository) Update(ctx context.Context, transaction *entity.Transaction) error {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTransactionRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *entity.Transaction
func (_e *MockTransactionRepository_Expecter) Update(ctx interface{}, transaction interface{}) *MockTransactionRepository_Update_Call {
	return &MockTransactionRepository_Update_Call{Call: _e.mock.On("Update", ctx, transaction)}
}

func (_c *MockTransactionRepository_Update_Call) Run(run func(ctx context.Context, transaction *entity.Transaction)) *MockTransactionRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Transaction))
	})
	return _c
}

func (_c *MockTransactionRepository_Update_Call) Return(_a0 error) *MockTransactionRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionRepository_Update_Call) RunAndReturn(run func(context.Context, *entity.Transaction) error) *MockTransactionRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionRepository creates a new instance of MockTransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionRepository {
	mock := &MockTransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
