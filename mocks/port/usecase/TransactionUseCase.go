// Code generated by mockery. DO NOT EDIT.

package usecase

import (
	context "context"

	usecase "github.com/amirhossein-jamali/balance-processor/internal/domain/port/usecase"
	mock "github.com/stretchr/testify/mock"
)

// MockTransactionUseCase is an autogenerated mock type for the TransactionUseCase type
type MockTransactionUseCase struct {
	mock.Mock
}

type MockTransactionUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionUseCase) EXPECT() *MockTransactionUseCase_Expecter {
	return &MockTransactionUseCase_Expecter{mock: &_m.Mock}
}

// IsDuplicateTransaction provides a mock function with given fields: ctx, transactionID
func (_m *MockTransactionUseCase) IsDuplicateTransaction(ctx context.Context, transactionID string) (bool, error) {
	ret := _m.Called(ctx, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for IsDuplicateTransaction")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, transactionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, transactionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionUseCase_IsDuplicateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDuplicateTransaction'
type MockTransactionUseCase_IsDuplicateTransaction_Call struct {
	*mock.Call
}

// IsDuplicateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionID string
func (_e *MockTransactionUseCase_Expecter) IsDuplicateTransaction(ctx interface{}, transactionID interface{}) *MockTransactionUseCase_IsDuplicateTransaction_Call {
	return &MockTransactionUseCase_IsDuplicateTransaction_Call{Call: _e.mock.On("IsDuplicateTransaction", ctx, transactionID)}
}

func (_c *MockTransactionUseCase_IsDuplicateTransaction_Call) Run(run func(ctx context.Context, transactionID string)) *MockTransactionUseCase_IsDuplicateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTransactionUseCase_IsDuplicateTransaction_Call) Return(_a0 bool, _a1 error) *MockTransactionUseCase_IsDuplicateTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionUseCase_IsDuplicateTransaction_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockTransactionUseCase_IsDuplicateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessTransaction provides a mock function with given fields: ctx, userID, req
func (_m *MockTransactionUseCase) ProcessTransaction(ctx context.Context, userID uint64, req usecase.TransactionRequest) (*usecase.TransactionResult, error) {
	ret := _m.Called(ctx, userID, req)

	if len(ret) == 0 {
		panic("no return value specified for ProcessTransaction")
	}

	var r0 *usecase.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, usecase.TransactionRequest) (*usecase.TransactionResult, error)); ok {
		return rf(ctx, userID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, usecase.TransactionRequest) *usecase.TransactionResult); ok {
		r0 = rf(ctx, userID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.TransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, usecase.TransactionRequest) error); ok {
		r1 = rf(ctx, userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionUseCase_ProcessTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessTransaction'
type MockTransactionUseCase_ProcessTransaction_Call struct {
	*mock.Call
}

// ProcessTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
//   - req usecase.TransactionRequest
func (_e *MockTransactionUseCase_Expecter) ProcessTransaction(ctx interface{}, userID interface{}, req interface{}) *MockTransactionUseCase_ProcessTransaction_Call {
	return &MockTransactionUseCase_ProcessTransaction_Call{Call: _e.mock.On("ProcessTransaction", ctx, userID, req)}
}

func (_c *MockTransactionUseCase_ProcessTransaction_Call) Run(run func(ctx context.Context, userID uint64, req usecase.TransactionRequest)) *MockTransactionUseCase_ProcessTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(usecase.TransactionRequest))
	})
	return _c
}

func (_c *MockTransactionUseCase_ProcessTransaction_Call) Return(_a0 *usecase.TransactionResult, _a1 error) *MockTransactionUseCase_ProcessTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionUseCase_ProcessTransaction_Call) RunAndReturn(run func(context.Context, uint64, usecase.TransactionRequest) (*usecase.TransactionResult, error)) *MockTransactionUseCase_ProcessTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTransactionRequest provides a mock function with given fields: req
func (_m *MockTransactionUseCase) ValidateTransactionRequest(req usecase.TransactionRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTransactionRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(usecase.TransactionRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionUseCase_ValidateTransactionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTransactionRequest'
type MockTransactionUseCase_ValidateTransactionRequest_Call struct {
	*mock.Call
}

// ValidateTransactionRequest is a helper method to define mock.On call
//   - req usecase.TransactionRequest
func (_e *MockTransactionUseCase_Expecter) ValidateTransactionRequest(req interface{}) *MockTransactionUseCase_ValidateTransactionRequest_Call {
	return &MockTransactionUseCase_ValidateTransactionRequest_Call{Call: _e.mock.On("ValidateTransactionRequest", req)}
}

func (_c *MockTransactionUseCase_ValidateTransactionRequest_Call) Run(run func(req usecase.TransactionRequest)) *MockTransactionUseCase_ValidateTransactionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(usecase.TransactionRequest))
	})
	return _c
}

func (_c *MockTransactionUseCase_ValidateTransactionRequest_Call) Return(_a0 error) *MockTransactionUseCase_ValidateTransactionRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionUseCase_ValidateTransactionRequest_Call) RunAndReturn(run func(usecase.TransactionRequest) error) *MockTransactionUseCase_ValidateTransactionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionUseCase creates a new instance of MockTransactionUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionUseCase {
	mock := &MockTransactionUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
