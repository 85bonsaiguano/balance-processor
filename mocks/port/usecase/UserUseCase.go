// Code generated by mockery. DO NOT EDIT.

package usecase

import (
	context "context"

	entity "github.com/amirhossein-jamali/balance-processor/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	time "time"

	usecase "github.com/amirhossein-jamali/balance-processor/internal/domain/port/usecase"
)

// MockUserUseCase is an autogenerated mock type for the UserUseCase type
type MockUserUseCase struct {
	mock.Mock
}

type MockUserUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserUseCase) EXPECT() *MockUserUseCase_Expecter {
	return &MockUserUseCase_Expecter{mock: &_m.Mock}
}

// CreateDefaultUsers provides a mock function with given fields: ctx
func (_m *MockUserUseCase) CreateDefaultUsers(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateDefaultUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserUseCase_CreateDefaultUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDefaultUsers'
type MockUserUseCase_CreateDefaultUsers_Call struct {
	*mock.Call
}

// CreateDefaultUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserUseCase_Expecter) CreateDefaultUsers(ctx interface{}) *MockUserUseCase_CreateDefaultUsers_Call {
	return &MockUserUseCase_CreateDefaultUsers_Call{Call: _e.mock.On("CreateDefaultUsers", ctx)}
}

func (_c *MockUserUseCase_CreateDefaultUsers_Call) Run(run func(ctx context.Context)) *MockUserUseCase_CreateDefaultUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserUseCase_CreateDefaultUsers_Call) Return(_a0 error) *MockUserUseCase_CreateDefaultUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserUseCase_CreateDefaultUsers_Call) RunAndReturn(run func(context.Context) error) *MockUserUseCase_CreateDefaultUsers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, id, initialBalance
func (_m *MockUserUseCase) CreateUser(ctx context.Context, id uint64, initialBalance string) (*entity.User, error) {
	ret := _m.Called(ctx, id, initialBalance)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) (*entity.User, error)); ok {
		return rf(ctx, id, initialBalance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) *entity.User); ok {
		r0 = rf(ctx, id, initialBalance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, string) error); ok {
		r1 = rf(ctx, id, initialBalance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserUseCase_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserUseCase_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
//   - initialBalance string
func (_e *MockUserUseCase_Expecter) CreateUser(ctx interface{}, id interface{}, initialBalance interface{}) *MockUserUseCase_CreateUser_Call {
	return &MockUserUseCase_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, id, initialBalance)}
}

func (_c *MockUserUseCase_CreateUser_Call) Run(run func(ctx context.Context, id uint64, initialBalance string)) *MockUserUseCase_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(string))
	})
	return _c
}

func (_c *MockUserUseCase_CreateUser_Call) Return(_a0 *entity.User, _a1 error) *MockUserUseCase_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserUseCase_CreateUser_Call) RunAndReturn(run func(context.Context, uint64, string) (*entity.User, error)) *MockUserUseCase_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetFormattedUserBalance provides a mock function with given fields: ctx, userID
func (_m *MockUserUseCase) GetFormattedUserBalance(ctx context.Context, userID uint64) (*usecase.UserBalanceResponse, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetFormattedUserBalance")
	}

	var r0 *usecase.UserBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*usecase.UserBalanceResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *usecase.UserBalanceResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.UserBalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserUseCase_GetFormattedUserBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFormattedUserBalance'
type MockUserUseCase_GetFormattedUserBalance_Call struct {
	*mock.Call
}

// GetFormattedUserBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
func (_e *MockUserUseCase_Expecter) GetFormattedUserBalance(ctx interface{}, userID interface{}) *MockUserUseCase_GetFormattedUserBalance_Call {
	return &MockUserUseCase_GetFormattedUserBalance_Call{Call: _e.mock.On("GetFormattedUserBalance", ctx, userID)}
}

func (_c *MockUserUseCase_GetFormattedUserBalance_Call) Run(run func(ctx context.Context, userID uint64)) *MockUserUseCase_GetFormattedUserBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockUserUseCase_GetFormattedUserBalance_Call) Return(_a0 *usecase.UserBalanceResponse, _a1 error) *MockUserUseCase_GetFormattedUserBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserUseCase_GetFormattedUserBalance_Call) RunAndReturn(run func(context.Context, uint64) (*usecase.UserBalanceResponse, error)) *MockUserUseCase_GetFormattedUserBalance_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyBalance provides a mock function with given fields: ctx, userID, amount, isWin, transactionID, sourceType
func (_m *MockUserUseCase) ModifyBalance(ctx context.Context, userID uint64, amount string, isWin bool, transactionID string, sourceType string) (*entity.User, time.Time, error) {
	ret := _m.Called(ctx, userID, amount, isWin, transactionID, sourceType)

	if len(ret) == 0 {
		panic("no return value specified for ModifyBalance")
	}

	var r0 *entity.User
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string, bool, string, string) (*entity.User, time.Time, error)); ok {
		return rf(ctx, userID, amount, isWin, transactionID, sourceType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string, bool, string, string) *entity.User); ok {
		r0 = rf(ctx, userID, amount, isWin, transactionID, sourceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, string, bool, string, string) time.Time); ok {
		r1 = rf(ctx, userID, amount, isWin, transactionID, sourceType)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64, string, bool, string, string) error); ok {
		r2 = rf(ctx, userID, amount, isWin, transactionID, sourceType)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserUseCase_ModifyBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyBalance'
type MockUserUseCase_ModifyBalance_Call struct {
	*mock.Call
}

// ModifyBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
//   - amount string
//   - isWin bool
//   - transactionID string
//   - sourceType string
func (_e *MockUserUseCase_Expecter) ModifyBalance(ctx interface{}, userID interface{}, amount interface{}, isWin interface{}, transactionID interface{}, sourceType interface{}) *MockUserUseCase_ModifyBalance_Call {
	return &MockUserUseCase_ModifyBalance_Call{Call: _e.mock.On("ModifyBalance", ctx, userID, amount, isWin, transactionID, sourceType)}
}

func (_c *MockUserUseCase_ModifyBalance_Call) Run(run func(ctx context.Context, userID uint64, amount string, isWin bool, transactionID string, sourceType string)) *MockUserUseCase_ModifyBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(string), args[3].(bool), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockUserUseCase_ModifyBalance_Call) Return(_a0 *entity.User, _a1 time.Time, _a2 error) *MockUserUseCase_ModifyBalance_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserUseCase_ModifyBalance_Call) RunAndReturn(run func(context.Context, uint64, string, bool, string, string) (*entity.User, time.Time, error)) *MockUserUseCase_ModifyBalance_Call {
	_c.Call.Return(run)
	return _c
}

// UserExists provides a mock function with given fields: ctx, userID
func (_m *MockUserUseCase) UserExists(ctx context.Context, userID uint64) (bool, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for UserExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (bool, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserUseCase_UserExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserExists'
type MockUserUseCase_UserExists_Call struct {
	*mock.Call
}

// UserExists is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
func (_e *MockUserUseCase_Expecter) UserExists(ctx interface{}, userID interface{}) *MockUserUseCase_UserExists_Call {
	return &MockUserUseCase_UserExists_Call{Call: _e.mock.On("UserExists", ctx, userID)}
}

func (_c *MockUserUseCase_UserExists_Call) Run(run func(ctx context.Context, userID uint64)) *MockUserUseCase_UserExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockUserUseCase_UserExists_Call) Return(_a0 bool, _a1 error) *MockUserUseCase_UserExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserUseCase_UserExists_Call) RunAndReturn(run func(context.Context, uint64) (bool, error)) *MockUserUseCase_UserExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserUseCase creates a new instance of MockUserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserUseCase {
	mock := &MockUserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
